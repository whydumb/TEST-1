plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    // JavaOSC 라이브러리 추가
    implementation 'com.illposed.osc:javaosc-core:0.7'
}

repositories {
    maven { url = 'https://maven.neoforged.net/releases' }
    mavenCentral()
}

processResources {
    inputs.property "version", project.version
    inputs.property "neoforge_version_range", project.neoforge_version_range

    filesMatching("META-INF/neoforge.mods.toml") {
        expand(rootProject.properties)
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    // 기본 설정: runtimeClasspath에서 의존성을 자동으로 포함
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"

    // OSC 라이브러리 명시적으로 포함 (올바른 방법)
    from {
        project.configurations.runtimeClasspath.findAll {
            it.name.contains('javaosc-core')
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    // 중복 파일 처리
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // 서비스 파일 병합
    mergeServiceFiles()
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveVersion.set("NeoForge${project.minecraft_version}-${project.mod_version}")

    // 빌드 후 파일 크기 확인
    doLast {
        println "Final jar size: ${archiveFile.get().asFile.length()} bytes"

        // OSC 라이브러리 포함 여부 확인
        def jarFile = archiveFile.get().asFile
        def command = ["jar", "-tf", jarFile.absolutePath]
        def process = command.execute()
        def output = process.text

        if (output.contains('com/illposed/osc/')) {
            println "✓ OSC library successfully included in jar!"
        } else {
            println "✗ OSC library NOT found in jar!"
        }
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        mavenCentral()
    }
}

runClient{
    args "--username","Dev"
    args "--width","1920"
    args "--height","1080"
}